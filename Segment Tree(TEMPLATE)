/*
   AUTHOR  : Peeyush Yadav
   Problem : SEGMENT TREE
*/
 
#include<bits/stdc++.h>
using namespace std;
typedef long long ll;
#define f(a,b,c)                for(int a=b;a<c;a++)
#define s(x)                    scanf("%d",&x);
#define sl(x)                   scanf("%lld",&x);
#define p(x)                    printf("%d\n",x);
#define p2(x,y)                 printf("%d %d\n",x,y);
#define pl(x)                   printf("%lld\n",x);
#define pl2(x,y)                printf("%lld %lld\n",x,y);
#define p1d(a,n)                for(int ix=0;ix<n;ix++) printf("%d ",a[ix]); printf("\n");
#define p2d(a,n,m)              for(int ix=0;ix<n;ix++){ for(int jx=0;jx<m;jx++) printf("%d ",a[ix][jx]); printf("\n");}
void input(){
	#ifdef Megamind
			#define DEBUG
			#define TRACE
			freopen("inp.txt","r",stdin);
			//freopen("out1.txt","w",stdout);
	#endif
}
#ifdef TRACE
	#define trace(x)                       cerr<<__FUNCTION__<<":"<<__LINE__<<": "#x" = "<<x<<endl;
	#define trace2(x,y)                    cerr<<__FUNCTION__<<":"<<__LINE__<<": "#x" = "<<x<<" | "#y" = "<<y<<endl;
	#define trace3(x,y,z)                  cerr<<__FUNCTION__<<":"<<__LINE__<<": "#x" = "<<x<<" | "#y" = "<<y<<" | "#z" = "<<z<<endl;
#else
	#define trace(x)
	#define trace2(x,y)
	#define trace3(x,y,z)
#endif
 
inline ll power(ll a, ll b, ll m) {
	ll r = 1;
	while(b) {
		if(b & 1) r = r * a % m;
		a = (a * a)% m;
		b >>= 1;
	}
	return r;
}
inline ll power(ll a, ll b) {
	 ll r = 1;
	while(b) {
		if(b & 1) r = r * a ;
		a = a * a;
		b >>= 1;
	}
	return r;
}
 
/*........................................................END OF TEMPLATES.......................................................................*/
#define sz 112345
int a[sz +1],tree[6*sz + 1];
bool updated[6*sz + 1];


void init(int node,int start,int end){
   // updated[node]=false;												 //IF LAZY REQUIRED

    if(start == end){
        tree[node]=a[i];
        return;
    }

    init(node*2,start, (start+end)/2 );
    init(node*2+1, (start+end)/2 + 1 ,end );
	
	//code here ....
	
    //tree[node]= tree[node*2]+tree[node*2 +1];
}

void liveagain(int node, int start, int end){					         //IF LAZY REQUIRED
    
	updated[node]=false;
    updated[2*node] = true;
    updated[2*node + 1] = true;

	//code here ....
	
    //tree[2*node] = (!!tree[node]) * ((start+end)/2 - start + 1);
	//tree[2*node + 1] = (!!tree[node]) * (end - (start+end)/2);
	
}


void update(int node, int start, int end, int i, int j, int val){
         
		 if(start>j || end < i) return ;

         if ( i <= start && end <= j){
            
			//code here ....
            
			//updated[node] = true;											 //IF LAZY REQUIRED
            return;
        }

        //if ( updated[node] ) liveagain(node, start, end);                 //IF LAZY REQUIRED

        update( 2*node, start, (start+end)/2, i, j, val);
        update( 2*node + 1, (start+end)/2+1, end, i, j, val);

		//code here ....
		
        //tree[node] = tree[2*node] + tree[2*node + 1];
		

}

int query(int node, int start ,int end , int i, int j){

    if( start > j || end < i) return 0;
    if(i <= start && end <= j) {
		
		//code here ....
		
		//return tree[node];
	}

    //if(updated[node]) liveagain(node, start, end);						//IF LAZY REQUIRED

	//code here ....
    //return query( 2*node, start, (start + end)/2, i, j ) + query( 2*node + 1, (start + end)/2 + 1, end, i, j);
}

 
int main(){
	input();
	
	//init(1,0,n-1);
	//update(1,0,n-1,l-1,r-1,v);
	//p(query(1,0,n-1,l-1,r-1));
	
	#ifdef Megamind
		cout << "\nTime elapsed : " << 1.0 * clock() / CLOCKS_PER_SEC * 1000 << " ms." << endl;
        #endif
}
